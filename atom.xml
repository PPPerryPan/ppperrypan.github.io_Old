<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ppperrypan.github.io</id>
    <title>Perry&apos;s Blog</title>
    <updated>2021-12-06T06:17:46.674Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ppperrypan.github.io"/>
    <link rel="self" href="https://ppperrypan.github.io/atom.xml"/>
    <logo>https://ppperrypan.github.io/images/avatar.png</logo>
    <icon>https://ppperrypan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Perry&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[清除Absolute防盗追踪软件]]></title>
        <id>https://ppperrypan.github.io/post/qing-chu-absolute-fang-dao-zhui-zong-ruan-jian/</id>
        <link href="https://ppperrypan.github.io/post/qing-chu-absolute-fang-dao-zhui-zong-ruan-jian/">
        </link>
        <updated>2021-12-04T07:42:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="起因">起因</h1>
<p>由于学业需求,从某鱼上捡来一台Surface 3,使用一段时间后发现疑似存在恶意软件，且重装系统无法清除，BIOS设置内无任何设置选项。</p>
<ol>
<li>疑似恶意程序&amp;进程<br>
<img src="https://ppperrypan.github.io/post-images/1638605099819.jpg" alt="疑似恶意进程" loading="lazy"></li>
<li>强制托管Chrome,插件名也极为邪恶<br>
<img src="https://ppperrypan.github.io/post-images/1638605263170.jpg" alt="疑似恶意插件" loading="lazy"></li>
</ol>
<p>后面发现是Absolute公司的一个防盗追踪软件，国内部分大学官网已提供解决方案，但在我的Surface上均不起作用，故找出了新的解决方案。</p>
<h1 id="分析">分析</h1>
<p>程序固化在BIOS固件中，最佳方案为换主板/刷BIOS。但以上方法并非最低成本解决方案。</p>
<p>经过简单分析，程序固化在BIOS中，仅有rpcnetp.exe一个文件，每次电脑开机时自动检测并嵌入到Windows系统中，如果电脑中没有完整的Absolute软件，等待连接到网络后将自动下载并安装，以此使软件保活。</p>
<h1 id="实施">实施</h1>
<p>清除方案：</p>
<ul>
<li><strong>以下过程需要全程断网</strong></li>
</ul>
<ol>
<li>重置系统，进入系统后在进程列表能找到名为rpcnetp的进程(以服务形式)<br>
<img src="https://ppperrypan.github.io/post-images/1638605287955.jpg" alt="进程" loading="lazy"></li>
<li>在桌面上新建一个txt，命名为rpcnetp.exe(需更改拓展名)</li>
<li>更改桌面上的rpcnetp.exe文件属性，勾选“只读”、“加密内容以保护数据”。<br>
<img src="https://ppperrypan.github.io/post-images/1638605304799.png" alt="属性" loading="lazy"></li>
<li>更改桌面上的rpcnetp.exe文件属性，“高级安全设置”内将 <strong>STSTEM</strong> , <strong>Administrators</strong> 设为 <strong>拒绝完全控制</strong>。<br>
<img src="https://ppperrypan.github.io/post-images/1638605317041.png" alt="属性" loading="lazy"></li>
<li>保存桌面上的rpcnetp.exe的文件属性</li>
<li>打开任务管理器，结束<strong>rpcnetp</strong>进程</li>
<li>将桌面上的rpcnetp.exe拷贝到 <strong>C:\Windows\System32</strong> 并选择覆盖已存在文件。</li>
</ol>
<h1 id="重启电脑">重启电脑</h1>
<p>此时<strong>重启的开机速度</strong>会比之前的开机速度慢30秒左右，但<strong>不影响</strong>关机后再开机的开机速度(前提：启用了“快速启动”功能并能够正常运作)。</p>
<p>系统启动后，任务管理器已不存在rpcnetp进程，Absolute防盗软件已被移除且在重装系统前无法自动修复和启动。(<strong>前提：请勿删除从桌面替换的&quot;C:\Windows\System32\rpcnetp.exe&quot;</strong> )<br>
<img src="https://ppperrypan.github.io/post-images/1638605329913.png" alt="属性" loading="lazy"></p>
<p><strong>清除已完成，连接到网络，正常使用电脑即可！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 连接 GitHub]]></title>
        <id>https://ppperrypan.github.io/post/gitbash-lian-jie-github/</id>
        <link href="https://ppperrypan.github.io/post/gitbash-lian-jie-github/">
        </link>
        <updated>2021-12-02T03:34:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="本地配置">本地配置</h1>
<ol>
<li>
<p>设置Email、userName</p>
<pre><code> git config --global user.email &quot;you@example.com&quot;  
 git config --global user.name &quot;Your userName&quot;
</code></pre>
</li>
<li>
<p>生成公钥</p>
<pre><code> ssh-keygen -C ‘your@email.address’ -t rsa
</code></pre>
</li>
<li>
<p>复制公钥</p>
<p>Windows:</p>
<pre><code> clip &lt; ~/.ssh/id_rsa.pub
</code></pre>
<p>macOS:</p>
<pre><code> cat ~/.ssh/id_rsa.pub | pbcopy
</code></pre>
</li>
</ol>
<h1 id="远程配置">远程配置</h1>
<ol>
<li>
<p>前往GitHub粘贴</p>
<p>Settings -- SSH ang GPG keys -- New SSH key</p>
</li>
</ol>
<h1 id="验证连接">验证连接</h1>
<pre><code>ssh -T git@github.com
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git基础]]></title>
        <id>https://ppperrypan.github.io/post/git-ji-chu/</id>
        <link href="https://ppperrypan.github.io/post/git-ji-chu/">
        </link>
        <updated>2021-12-01T09:58:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="git介绍">Git介绍</h2>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>
Git 可以有效、高速地处理从很小到非常大的项目版本管理，并且因为采用了分布式版本库的方式，不必服务器端软件支持。</p>
<h3 id="git的三种状态">Git的三种状态</h3>
<p>Git的文件有三种状态: <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong></p>
<ul>
<li>
<p>已修改表示修改了文件，但还没保存到数据库中。</p>
</li>
<li>
<p>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p>
</li>
<li>
<p>已提交表示数据已经安全的保存在本地数据库中。</p>
</li>
</ul>
<p>这会让我们的<code>Git</code>项目拥有三个阶段：工作区、暂存区以及<code>Git</code>目录。</p>
<figure data-type="image" tabindex="1"><img src="https://ppperrypan.github.io/post-images/1638368488447.png" alt="工作目录、暂存区域以及 Git 仓库" loading="lazy"></figure>
<p>工作区是对项目的某个版本独立提取出来的内容。这些从<code>Git</code>仓库的压缩数据库中提取出来的文件,放在磁盘上供你使用或修改。</p>
<p>暂存区是一个文件,保存了下次将要提交的文件列表信息,一般在<code>Git</code>仓库目录中。按照<code>Git</code>的术语叫做“索 引”，不过一般说法还是叫“暂存区”。</p>
<p><code>Git</code> 仓库目录是 <code>Git</code> 用来保存项目的元数据和对象数据库的地方。 这是 <code>Git</code> 中最重要的部分，从其它计算机克隆 仓库时，复制的就是这里的数据。</p>
<p>基本的 <code>Git</code> 工作流程如下：</p>
<pre><code>1. 在工作区中修改文件。

2. 将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。 

3. 提交更新，找到暂存区的文件，将快照永久性存储到 `Git` 目录。 
</code></pre>
<p>如果 <code>Git</code> 目录中保存着特定版本的文件，就属于 <strong>已提交</strong> 状态。 如果文件已修改并放入暂存区，就属于 <strong>已暂存</strong> 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 <strong>已修改</strong> 状态。</p>
<h2 id="实用git操作">实用Git操作</h2>
<ul>
<li>
<p><code>git commit -a</code></p>
<p>直接跳过使用暂存区域也就是跳过 <code>git add</code> 操作，直接把所有已经跟踪过的文件暂存并提交。</p>
</li>
<li>
<p><code>git mv</code></p>
<p>就相当于运行了下面三条命令：</p>
<pre><code class="language-shell">$ mv README.md README 
$ git rm README.md 
$ git add README 
</code></pre>
</li>
<li>
<p><code>git log -n</code></p>
<p>指定显示几次提交记录</p>
</li>
<li>
<p><code>git commit --amend</code></p>
<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 --amend 选 项的提交命令来重新提交：</p>
</li>
<li>
<p><code>git reset HEAD &lt;file&gt;</code></p>
<p>取消指定文件的暂存状态</p>
</li>
<li>
<p><code>git checkout -- &lt;file&gt;</code></p>
<p>撤销对文件的修改</p>
</li>
</ul>
<h3 id="创建标签">创建标签</h3>
<p><code>Git</code> 支持两种标签：轻量标签<code>（lightweight）</code>与附注标签<code>（annotated）</code>。</p>
<p>轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。</p>
<p>而附注标签是存储在 <code>Git</code> 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件 地址、日期时间， 此外还有一个标签信息，并且可以使用 <code>GNU Privacy Guard （GPG）</code>签名并验证。</p>
<ul>
<li>
<p><code>git tag &lt;tagname&gt;</code></p>
<p>创建轻量标签</p>
</li>
<li>
<p><code>git tag -a &lt;tagname&gt;</code></p>
<p>创建附注标签</p>
</li>
<li>
<p><code>git show &lt;tagname&gt;</code></p>
<p>显示标签信息</p>
</li>
<li>
<p><code>git push origin &lt;tagname&gt;</code></p>
<p>推送指定标签到远程仓库</p>
</li>
<li>
<p><code>git push origin --tags</code></p>
<p>推送本地所有标签</p>
</li>
<li>
<p><code>git tag -d &lt;tagname&gt;</code></p>
<p>删除本地标签</p>
</li>
<li>
<p><code>git push origin --delete &lt;tagname&gt;</code></p>
<p>同步本地删除的标签到远程仓库</p>
</li>
<li>
<p><code>git config --global alias.co checkout</code></p>
<p>可以通过 <code>git config</code> 文件来轻松地为每一个命令设置一个别名<br>
上面的例子设置了 <code>git co</code> 代替 <code>git checkou</code></p>
</li>
</ul>
]]></content>
    </entry>
</feed>